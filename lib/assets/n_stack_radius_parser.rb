#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'
require 'pp'

class NStackRadiusParser < Racc::Parser

module_eval(<<'...end n_stack_radius_parser.ry/module_eval...', 'n_stack_radius_parser.ry', 77)

def parse(str)
    scanner = StringScanner.new(str)
    @q = []
    while !scanner.eos?
        scanner.scan(/[\s\n]+/)
        scanner.scan(/phase/) ?                     @q << [:PHASE, :PHASE] :
        scanner.scan(/true/) ?                      @q << [:BOOLEAN, true] :
        scanner.scan(/false/) ?                     @q << [:BOOLEAN, false] :
        scanner.scan(/do/) ?                        @q << [:DO, :do] :
        scanner.scan(/goto/) ?                      @q << [:GOTO, :goto] :

        scanner.scan(/\".*?\"/) ?                   @q << [:STRING, scanner.matched[1..-2]] :
        scanner.scan(/\'.*?\'/) ?                   @q << [:STRING, scanner.matched[1..-2]] :
        scanner.scan(/[a-zA-Z_][a-zA-Z0-9_]*/) ?    @q << [:IDENTIFIER, scanner.matched.to_s] :
        scanner.scan(/([0-9]*\.[0-9]+)/) ?          @q << [:NUMBER, scanner.matched.to_f] :
        scanner.scan(/(0|[1-9][0-9]*)/) ?           @q << [:NUMBER, scanner.matched.to_i] :
        scanner.scan(/./) ?                         @q << [scanner.matched, scanner.matched] :
        raise("parse error")
    end
    tree = do_parse
    #pp tree
    convert(tree)
end

def next_token
    @q.shift
end

def convert(tree)
    stack = [tree]
    operations = []
    while !stack.empty?
        node = stack.pop()
        #puts "NODE:#{node[0]}"
        #puts "CHILDREN:#{node[2]}"
        case node[0]
            when :phase # phase文は特別な処理を行う
                node[2].each do |child|
                    stack.push(child)
                end
                operations.push([:phase, convert(node[1]), node[2].length])

            when :do # do文は特別な処理を行う
                node[2].each do |child|
                    stack.push(child)
                end
                operations.push([:do, convert(node[1]), node[2].length])

            else        # それ以外は同じ
                if node[2]
                    node[2].each do |child|
                        stack.push(child)
                    end
                    operations.push([node[0], node[1], node[2].length])
                else
                    operations.push([node[0], node[1], 0])
                end
        end
    end
    operations
end

...end n_stack_radius_parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
    21,     9,    72,    61,    21,    20,    55,     8,    56,    20,
    43,    60,    44,    22,    23,    24,     8,    22,    23,    24,
     8,    21,    25,    23,    26,    21,    20,     8,    27,    58,
    20,    27,    57,    59,    22,    23,    24,     8,    22,    23,
    24,     8,    21,    71,    55,    57,    56,    20,    63,    55,
    16,    56,     6,    65,     3,    22,    23,    24,     8,    21,
    11,     5,    75,    21,    20,     8,     8,    16,    20,    28,
    23,   nil,    22,    23,    24,     8,    22,    23,    24,     8,
    21,   nil,   nil,   nil,    21,    20,   nil,   nil,   nil,    20,
   nil,   nil,   nil,    22,    23,    24,     8,    22,    23,    24,
     8,    21,   nil,   nil,   nil,    21,    20,   nil,   nil,   nil,
    20,    40,   nil,   nil,    22,    23,    24,     8,    22,    23,
    24,     8,    21,   nil,   nil,   nil,    21,    20,   nil,   nil,
   nil,    20,   nil,   nil,   nil,    22,    23,    24,     8,    22,
    23,    24,     8,    21,   nil,   nil,   nil,   nil,    20,    21,
   nil,   nil,   nil,   nil,    20,    21,    22,    23,    24,     8,
    20,    47,    22,    23,    24,     8,   nil,    21,    22,    23,
    24,     8,    20,    33,    34,    35,    31,    32,   nil,   nil,
    22,    23,    24,     8,    55,   nil,    56,    33,    34,    35,
    31,    32,    33,    34,    35,    31,    32,   nil,    29,   nil,
    30,   nil,   nil,    55,   nil,    56,    33,    34,    35,    31,
    32,    33,    34,    35,    31,    32,   nil,    55,   nil,    56,
   nil,   nil,    55,    64,    56,    33,    34,    35,    33,    34,
    35,    33,    34,    35,    31,    32,    55,   nil,    56,    55,
   nil,    56,    55,    74,    56,    33,    34,    35,    31,    32,
    33,    34,    35,    31,    32,   nil,    55,   nil,    56,   nil,
   nil,    55,   nil,    56,    33,    34,    35,    31,    32,    33,
    34,    35,    31,    32,   nil,    55,   nil,    56,   nil,   nil,
    55,   nil,    56 ]

racc_action_check = [
    34,     7,    64,    42,    32,    34,    54,    30,    54,    32,
    21,    42,    25,    34,    34,    34,    34,    32,    32,    32,
    32,    33,    12,    21,    12,    65,    33,     5,    39,    38,
    65,    12,    38,    41,    33,    33,    33,    33,    65,    65,
    65,    65,    62,    62,    52,    46,    52,    62,    46,    53,
    62,    53,     3,    49,     1,    62,    62,    62,    62,    10,
    10,     2,    70,    59,    10,    16,    56,    10,    59,    13,
    60,   nil,    10,    10,    10,    10,    59,    59,    59,    59,
    57,   nil,   nil,   nil,    75,    57,   nil,   nil,   nil,    75,
   nil,   nil,   nil,    57,    57,    57,    57,    75,    75,    75,
    75,    55,   nil,   nil,   nil,    20,    55,   nil,   nil,   nil,
    20,    20,   nil,   nil,    55,    55,    55,    55,    20,    20,
    20,    20,    72,   nil,   nil,   nil,    35,    72,   nil,   nil,
   nil,    35,   nil,   nil,   nil,    72,    72,    72,    72,    35,
    35,    35,    35,    26,   nil,   nil,   nil,   nil,    26,    27,
   nil,   nil,   nil,   nil,    27,    29,    26,    26,    26,    26,
    29,    27,    27,    27,    27,    27,   nil,    31,    29,    29,
    29,    29,    31,    77,    77,    77,    77,    77,   nil,   nil,
    31,    31,    31,    31,    77,   nil,    77,    14,    14,    14,
    14,    14,    37,    37,    37,    37,    37,   nil,    14,   nil,
    14,   nil,   nil,    37,   nil,    37,    45,    45,    45,    45,
    45,    48,    48,    48,    48,    48,   nil,    45,   nil,    45,
   nil,   nil,    48,    48,    48,    50,    50,    50,    51,    51,
    51,    66,    66,    66,    66,    66,    50,   nil,    50,    51,
   nil,    51,    66,    66,    66,    68,    68,    68,    68,    68,
    69,    69,    69,    69,    69,   nil,    68,   nil,    68,   nil,
   nil,    69,   nil,    69,    73,    73,    73,    73,    73,    76,
    76,    76,    76,    76,   nil,    73,   nil,    73,   nil,   nil,
    76,   nil,    76 ]

racc_action_pointer = [
   nil,    54,    54,    52,   nil,     3,   nil,    -7,   nil,   nil,
    51,   nil,    12,    58,   185,   nil,    41,   nil,   nil,   nil,
    97,     1,   nil,   nil,   nil,     4,   135,   141,   nil,   147,
   -17,   159,    -4,    13,    -8,   118,   nil,   190,    15,     9,
   nil,    15,    -6,   nil,   nil,   204,    28,   nil,   209,    41,
   223,   226,    31,    36,    -7,    93,    42,    72,   nil,    55,
    48,   nil,    34,   nil,   -10,    17,   229,   nil,   243,   248,
    44,   nil,   114,   262,   nil,    76,   267,   171 ]

racc_action_default = [
    -2,   -40,    -1,   -40,    -3,   -40,    78,   -40,   -39,    -6,
   -40,    -4,   -27,    -7,    -9,   -13,   -40,   -24,   -25,   -26,
   -40,   -40,   -36,   -37,   -38,   -40,   -40,   -40,    -8,   -40,
   -40,   -40,   -40,   -40,   -40,   -40,   -14,   -15,   -40,   -27,
   -32,   -40,   -40,   -34,    -6,   -10,   -40,   -30,   -40,   -29,
   -19,   -20,   -21,   -22,   -23,   -40,   -40,   -40,   -33,   -40,
   -40,   -35,   -40,   -31,   -28,   -40,   -40,   -29,   -16,   -17,
   -40,    -5,   -40,   -12,   -28,   -40,   -11,   -18 ]

racc_goto_table = [
     7,    37,    41,     1,    10,    12,     4,    45,    37,    42,
    48,    36,    50,    51,    52,    53,    54,    38,     2,   nil,
   nil,   nil,   nil,   nil,    46,    49,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    66,   nil,    68,    62,
    69,    70,   nil,   nil,   nil,   nil,    73,   nil,   nil,   nil,
   nil,    67,   nil,    76,   nil,   nil,    77,    12 ]

racc_goto_check = [
     4,     8,    11,     1,     5,     4,     3,     8,     8,    10,
     8,     4,     8,     8,     8,     8,     8,     9,     2,   nil,
   nil,   nil,   nil,   nil,     9,     4,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,     8,     5,
     8,    11,   nil,   nil,   nil,   nil,     8,   nil,   nil,   nil,
   nil,     4,   nil,     8,   nil,   nil,     8,     4 ]

racc_goto_pointer = [
   nil,     3,    18,     4,    -5,    -5,   nil,   nil,   -19,    -3,
   -12,   -19,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    39,   nil,    15,    13,    14,   nil,
   nil,    18,    17,    19 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 26, :_reduce_1,
  0, 27, :_reduce_2,
  2, 27, :_reduce_3,
  5, 28, :_reduce_4,
  5, 31, :_reduce_5,
  0, 30, :_reduce_6,
  2, 30, :_reduce_7,
  3, 30, :_reduce_8,
  1, 32, :_reduce_none,
  3, 32, :_reduce_10,
  6, 32, :_reduce_11,
  5, 32, :_reduce_12,
  1, 32, :_reduce_none,
  2, 32, :_reduce_14,
  1, 34, :_reduce_15,
  3, 34, :_reduce_16,
  3, 35, :_reduce_17,
  5, 35, :_reduce_18,
  3, 33, :_reduce_19,
  3, 33, :_reduce_20,
  3, 33, :_reduce_21,
  3, 33, :_reduce_22,
  3, 33, :_reduce_23,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_27,
  4, 33, :_reduce_28,
  3, 33, :_reduce_29,
  3, 33, :_reduce_30,
  4, 33, :_reduce_31,
  2, 33, :_reduce_32,
  3, 33, :_reduce_33,
  2, 33, :_reduce_34,
  3, 33, :_reduce_35,
  1, 37, :_reduce_36,
  1, 36, :_reduce_37,
  1, 38, :_reduce_38,
  1, 29, :_reduce_39 ]

racc_reduce_n = 40

racc_shift_n = 78

racc_token_table = {
  false => 0,
  :error => 1,
  "*" => 2,
  "/" => 3,
  "%" => 4,
  "+" => 5,
  "-" => 6,
  :PHASE => 7,
  "{" => 8,
  "}" => 9,
  :DO => 10,
  ";" => 11,
  "=" => 12,
  "[" => 13,
  "]" => 14,
  "." => 15,
  :GOTO => 16,
  "," => 17,
  ":" => 18,
  "(" => 19,
  ")" => 20,
  :NUMBER => 21,
  :STRING => 22,
  :BOOLEAN => 23,
  :IDENTIFIER => 24 }

racc_nt_base = 25

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "PHASE",
  "\"{\"",
  "\"}\"",
  "DO",
  "\";\"",
  "\"=\"",
  "\"[\"",
  "\"]\"",
  "\".\"",
  "GOTO",
  "\",\"",
  "\":\"",
  "\"(\"",
  "\")\"",
  "NUMBER",
  "STRING",
  "BOOLEAN",
  "IDENTIFIER",
  "$start",
  "program",
  "phases",
  "phase",
  "identifier",
  "statements",
  "do",
  "statement",
  "expr",
  "arguments",
  "key_values",
  "string",
  "number",
  "boolean" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 8)
  def _reduce_1(val, _values, result)
    result = [:program, nil, [val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 11)
  def _reduce_2(val, _values, result)
    result = [:phases, nil, []]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 12)
  def _reduce_3(val, _values, result)
    result[2] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 15)
  def _reduce_4(val, _values, result)
    result = [:phase, val[3], [val[1]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 18)
  def _reduce_5(val, _values, result)
    result = [:do, val[3], [val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 21)
  def _reduce_6(val, _values, result)
    result = [:statements, nil, []]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 22)
  def _reduce_7(val, _values, result)
    result[2] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 23)
  def _reduce_8(val, _values, result)
    result[2] << val[1]
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 27)
  def _reduce_10(val, _values, result)
    result = [:assign_variable, nil, [[:variable_env, nil, nil], val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 28)
  def _reduce_11(val, _values, result)
    result = [:assign_variable, nil, [val[0], val[2], val[5]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 29)
  def _reduce_12(val, _values, result)
    result = [:assign_variable, nil, [val[0], val[2], val[4]]]
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 31)
  def _reduce_14(val, _values, result)
    result = [:goto, nil, [val[1]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 34)
  def _reduce_15(val, _values, result)
    result = [:arguments, nil, [val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 35)
  def _reduce_16(val, _values, result)
    result[2] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 38)
  def _reduce_17(val, _values, result)
    result = [:key_values, nil, [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 39)
  def _reduce_18(val, _values, result)
    result[2] << val[2] << val[4]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 42)
  def _reduce_19(val, _values, result)
    result = [:add, nil, [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 43)
  def _reduce_20(val, _values, result)
    result = [:dif, nil, [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 44)
  def _reduce_21(val, _values, result)
    result = [:mul, nil, [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 45)
  def _reduce_22(val, _values, result)
    result = [:div, nil, [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 46)
  def _reduce_23(val, _values, result)
    result = [:mod, nil, [val[0], val[2]]]
    result
  end
.,.,

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 50)
  def _reduce_27(val, _values, result)
    result = [:reference_variable, nil, [val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 51)
  def _reduce_28(val, _values, result)
    result = [:index, nil, [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 52)
  def _reduce_29(val, _values, result)
    result = [:index, nil, [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 53)
  def _reduce_30(val, _values, result)
    result = [:call_function, nil, [val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 54)
  def _reduce_31(val, _values, result)
    result = [:call_function, nil, [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 55)
  def _reduce_32(val, _values, result)
    result = [:define_array, nil, nil]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 56)
  def _reduce_33(val, _values, result)
    result = [:define_array, nil, [val[1]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 57)
  def _reduce_34(val, _values, result)
    result = [:define_hash, nil, nil]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 58)
  def _reduce_35(val, _values, result)
    result = [:define_hash, nil, [val[1]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 61)
  def _reduce_36(val, _values, result)
    result = [:number, val[0], nil]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 63)
  def _reduce_37(val, _values, result)
    result = [:string, val[0], nil]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 65)
  def _reduce_38(val, _values, result)
    result = [:boolean, val[0], nil]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 67)
  def _reduce_39(val, _values, result)
    result = [:identifier, val[0], nil]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class NStackRadiusParser


if __FILE__ == $0
    parser = NStackRadiusParser.new
    prg = ""
    File.open("program.rlb", "r") do |f|
        prg = f.read.chomp
    end
    pp parser.parse(prg)

end
